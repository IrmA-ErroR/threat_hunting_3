---
title: 
    "Применение технологий искусственного интеллекта и машинного обучения для поиска угроз информационной безопасности"
author: "Kabanova Svetlana"
format: 
    md:
        output-file: README.md
editor: visual
---

# Лабораторная работа №3

## Цель работы

1. Изучить возможности технологии Apache Arrow для обработки и анализ больших данных 

2. Получить навыки применения Arrow совместно с языком программирования R 

3. Получить навыки анализа метаинфомации о сетевом трафике 

4. Получить навыки применения облачных технологий хранения, подготовки и анализа данных: Yandex Object Storage, Rstudio Server.

## Исходные данные

1.  ОС Ubuntu.

2.  Apache Arrow.

3.  RStudio.

4.  Yandex Object Storage.

## План

1.  Войдем в RStudio через SSH с использованием учетных данных пользователя.

2.  Выполним практическое задание.

3.  Составим отчет, в котором будет описан наш подход, результаты и выводы.

## Ход работы

-   Подключаемся по SSH к RStudio Server с user11

```         
    ssh -i /home/irina/threat_hunting_3/lab_3/rstudio.key -L 8787:127.0.0.1:8787 user11@62.84.123.211
```

![](img/1.png)

-   Меняем пароль

![](img/2.png)

-   Заходим на Rstudio Server по адресу http://127.0.0.1:8787 , используя user11

![](img/3.png)

Необходимо подключить библиотеки:

```{r}
library(arrow, warn.conflicts = FALSE)
library(tidyverse, warn.conflicts = FALSE)
```

Arrow - библиотека для работы с структурированными данными в формате Apache Arrow. Tidyverse - набор пакетов R, который предоставляет удобный и последовательный подход к анализу данных.

### Задание 1: Надите утечку данных из Вашей сети

Важнейшие документы с результатами нашей исследовательской деятельности в области создания вакцин скачиваются в виде больших заархивированных дампов. Один из хостов в нашей сети используется для пересылки этой информации – он пересылает гораздо больше информации на внешние ресурсы в Интернете, чем остальные компьютеры нашей сети. Определите его IP-адрес.

Создаем директорию src и загружаем в нее dataframe arrow-datasets/tm_data.pqt из Yandex Object Storage.

```{r}
dir.create("src", showWarnings = FALSE)

curl::multi_download(
"https://storage.yandexcloud.net/arrow-datasets/tm_data.pqt",
"src/dataframe",
resume = TRUE
)
```

С помощью функции open_dataset() открываем файл формата Apache Arrow. Параметр schema указывает схему данных (структура столбцов и тип данных)

```{r}
df <- open_dataset(
  sources = "src/dataframe",
  schema = schema(timestamp = int64(),
                  src = utf8(),
                  dst = utf8(),
                  port = uint32(),
                  bytes = uint32())
)

glimpse(df)
```

Выведем список IP-адресов отправителей (src) сетевого трафика, которые отправляют более 6000000000 байт данных по сети, и при этом адреса получателей (dst) не начинаются с префиксов "12.", "13." или "14." (префиксы внутренней сети)

```{r}
utechka <- df %>%
          filter(
            str_detect(src, "^(12|13|14)\\.") & 
              !str_detect(dst, "^(12|13|14)\\.")
          ) %>%
          group_by(src) %>%
          summarise(sum = sum(bytes)) %>%
          filter(sum > 6000000000) %>%
          select(src, sum) %>%
          collect()
cat(utechka$src)
```

Отлично, хост найден

### Задание 2: Надите утечку данных 2

Другой атакующий установил автоматическую задачу в системном планировщике cron для экспорта содержимого внутренней wiki системы. Эта система генерирует большое количество трафика в нерабочие часы, больше чем остальные хосты. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителя из предыдущей задачи.

Выбираем из датафрейма записи, где IP-адресов отправителей (src) сетевого трафика ачинаются с префиксов "12.", "13." или "14." (префиксы внутренней сети), а адреса получателей (dst) не начинаются с префиксов "12.", "13." или "14." Добавим столбец часа в который содержит часы из timestamp после преобразования в формат даты/времени. Посчитаем трафик для каждого значения time и отсортируем в порядке убывания.

```{r}
utechka2 <- df %>%
  select(timestamp, src, dst, bytes) %>%
  filter(str_detect(src, "^((12|13|14)\\.)") & !str_detect(dst, "^((12|13|14)\\.)")) %>%
  mutate(time = hour(as_datetime(timestamp / 1000))) %>%
  filter(time >= 0 & time <= 24) %>%
  count(time, name = "trafictime") %>%
  arrange(desc(trafictime)) %>%
  collect()
```

Для каждого IP адреса внутренней сети просуммируем количество байт, которые он пересылает во внешнюю сеть в нерабочее время (1 \<= time \<= 15). Найдем тот, у которого эта сумма максимальная

```{r}
utechka2s <- df %>%
  mutate(time = hour(as_datetime(timestamp / 1000))) %>%
  filter(!str_detect(src, "^13.37.84.125"),
         (str_detect(src, "^12.") | str_detect(src, "^13.") | str_detect(src, "^14.")),
         (!str_detect(dst, "^12.") | !str_detect(dst, "^13.") | !str_detect(dst, "^14.")),
         time >= 1 & time <= 15) %>%
  group_by(src) %>%
  summarise(sum = sum(bytes)) %>%
  filter(sum > 290000000) %>%
  select(src, sum) %>%
  collect()
cat(utechka2s$src)
```

Отлично, хост найден

### Задание 3: Надите утечку данных 3

Еще один нарушитель собирает содержимое электронной почты и отправляет в Интернет используя порт, который обычно используется для другого типа трафика. Атакующий пересылает большое количество информации используя этот порт, которое нехарактерно для других хостов, использующих этот номер порта. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителей из предыдущих задач.

Выбираем из датафрейма записи, где IP-адресов отправителей (src) сетевого трафика ачинаются с префиксов "12.", "13." или "14." (префиксы внутренней сети), а адреса получателей (dst) не начинаются с префиксов "12.", "13." или "14." А также не равны IP из 1 и 2 заданий.
 

```{r}
utechka3 <- df %>%
  filter(!str_detect(src, "^13.37.84.125"),
         !str_detect(src, "^12.55.77.96"),
         (str_detect(src, "^12.") | str_detect(src, "^13.") | str_detect(src, "^14.")),
         (!str_detect(dst, "^12.") | !str_detect(dst, "^13.") | !str_detect(dst, "^14.")))  %>% 
  select(src, bytes, port) 
```

Сгруппируем трафик по портам и найдем те, для которых разница между максимальным и средним количеством переданных байтов максимаальна (более 170000 байт).

```{R}
utechka3s <- utechka3 %>%  
  group_by(port) %>% 
  summarise("mean"=mean(bytes), "max"=max(bytes), "sum" = sum(bytes)) %>% 
  mutate("difference"= max-mean)  %>% filter(difference!=0, difference>170000) %>%
  collect()
```

Найдем IP-адреса отправителей (src), которые передали значительное количество данных (в среднем более 37543 байт) через порт 37
```{r}
utechka3a<- utechka3 %>%
  filter(port == 37) %>%
  group_by(src) %>%
  summarise(mean = mean(bytes)) %>%
  filter(mean > 37543) %>%
  select(src) %>%
  collect()
cat(utechka3a$src)
```

Отлично, хост найден 

### Оценка результата

Успешное выполнение задачи было достигнуто благодаря использованию облачных технологий, включая RStudio и Apache Arrow. В процессе работы с Apache Arrow удалось ознакомиться с его функциональностью и эффективно использовать его возможности для выполнения поставленной задачи.

### Вывод

В рамках данной работы была получена ценная практическая опытность в применении облачных технологий для хранения, подготовки и анализа данных. Благодаря этому удалось успешно провести анализ метаинформации о сетевом трафике и получить полезные результаты.
